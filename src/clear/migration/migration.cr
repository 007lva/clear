module Clear::Migration::Helper; end

###
# Base module for database migration management.
#
###
module Clear::Migration
  include Helper

  macro included

    ###
    # Return the migration number (Unique ID or UID) for migration sorting.
    #
    # Default behavior (By order of priority):
    #
    # - The uid will be generated by the class name, if the class name contains number at the end.
    # - If there's no numbers in the migration class, then it will try to use the id in the filename
    # - If not found, an exception is raised. This method can be overwritten by the concrete migration in case you need it.
    #
    # Example:
    #
    # `class MyMigration1234567 # << Order = 1234567`
    # `file db/1234567_my_migration.cr # << Order = 1234567`
    #
    ###
    def uid
      filename = File.basename(__FILE__)
      if self.class.name =~ /[0-9]+$/
        self.class.name[/[0-9]+$/]
      elsif filename =~ /^[0-9]$/
        filename[/^[0-9]$/]
      else
        raise \
            "I don't know how to order this migration.\n" +
            "– Rename your migration class to have the migration UID at the end of the classname\n" +
            "– Rename your file to have the migration UID in front of the filename\n" +
            "– Override the method uid ! Be sure the number is immutable\n"
      end
    end

  end

  abstract def change(dir)

  def execute(x : String)
    SQL.connection.execute(x)
  end

  def apply(dir)
    change(dir)

    if dir == :up
      @operations.each(&.up)
    elsif dir == :down
      @operations.each(&.down)
    end
  end

  def included
    Migration::Manager.instance.add(self.new)
  end
end

require "./operation"
